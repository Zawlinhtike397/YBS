double desLati = 21.8224255;
double desLongi = 96.3426859;
double distance = 0;
double startLati = 0;
double startLongi = 0;
double liveLati = 0;
double liveLongi = 0;
double movement = 0;


startLati = position.latitude;
startLongi = position.longitude;
distance = FlutterMapMath.distanceBetween(
            desLati,
            desLongi,
            position.latitude,
            position.longitude,
            "feet",
            );

if (AppData.busStopList.isEmpty) {
        AppData.busStopList.add(
          BusStop(
            id: 1,
            name: "Start",
            latitude: startLati,
            longitude: startLongi,
          ),
        );
      }

setState(() {
                liveLati = position.latitude;
                liveLongi = position.longitude;
                movement = FlutterMapMath.distanceBetween(
                  startLati,
                  startLongi,
                  liveLati,
                  liveLongi,
                  "feet",
                );
                currentLocation = position.toString();
              });

positionStreamStarted
                ? SizedBox()
                : MaterialButton(
                    onPressed: () async {
                      listenToPosition();
                    },
                    color: Theme.of(context).colorScheme.primary,
                    textColor: Theme.of(context).colorScheme.onPrimary,
                    child: Text("Start Track Location"),
                  ),

            positionStreamStarted
                ? TextButton(
                    onPressed: () {
                      AppData.busStopList.add(
                        BusStop(
                          id: 1,
                          name: "name",
                          latitude: liveLati,
                          longitude: liveLongi,
                        ),
                      );
                      setState(() {});
                    },
                    child: Text("Mark"),
                  )
                : SizedBox(),
            for (var i in AppData.busStopList)
              SelectableText("[${i.latitude}, ${i.longitude}]"),
            TextButton(onPressed: () {}, child: Text("Open Map")),


I/flutter (11163): 21.828462, 96.356405
I/flutter (11163): 21.830081, 96.356889
I/flutter (11163): 21.833097, 96.357384
I/flutter (11163): 21.835505, 96.356425
I/flutter (11163): 21.837542, 96.355197
I/flutter (11163): 21.838893, 96.352709
I/flutter (11163): 21.841475, 96.351977
I/flutter (11163): 21.844161, 96.352473
I/flutter (11163): 21.845369, 96.350384
I/flutter (11163): 21.846795, 96.349075
I/flutter (11163): 21.849169, 96.349116
I/flutter (11163): 21.8511, 96.349293
I/flutter (11163): 21.852848, 96.348805
I/flutter (11163): 21.854418, 96.34884
I/flutter (11163): 21.855831, 96.348167
I/flutter (11163): 21.857323, 96.34807
I/flutter (11163): 21.859476, 96.348656
I/flutter (11163): 21.858798, 96.347027
I/flutter (11163): 21.857034, 96.343362
I/flutter (11163): 21.855659, 96.341052
I/flutter (11163): 21.854579, 96.33938
I/flutter (11163): 21.856175, 96.337173
I/flutter (11163): 21.855669, 96.335847
I/flutter (11163): 21.856444, 96.335372
I/flutter (11163): 21.858631, 96.33622
I/flutter (11163): 21.860359, 96.336524
I/flutter (11163): 21.860163, 96.335888
I/flutter (11163): 21.860378, 96.335581
I/flutter (11163): 21.860481, 96.335011
I/flutter (11163): 21.860545, 96.334444
I/flutter (11163): 21.859855, 96.333125
I/flutter (11163): 21.857926, 96.327733
I/flutter (11163): 21.857628, 96.323737
I/flutter (11163): 21.860575, 96.320345
I/flutter (11163): 21.859933, 96.317823

------ route_page backup code -----------
import 'dart:convert';
import 'dart:io';

import 'package:blinking_text/blinking_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_foreground_task/flutter_foreground_task.dart';
import 'package:geolocator/geolocator.dart';
import 'package:minimize_flutter_app/minimize_flutter_app.dart';
import 'package:timeline_tile/timeline_tile.dart';
import 'package:ybs/controllers/hex_color.dart';
import 'package:ybs/data/app_data.dart';
import 'package:ybs/main.dart';
import 'package:ybs/models/bus_stop.dart';
import 'package:ybs/models/route_data.dart';
import 'package:ybs/views/components/bus_card.dart';

enum CurrentStage { wayToBusStop, onBus, transit, arrive }

class RoutePage extends StatefulWidget {
  final List<RouteData> route;
  const RoutePage({super.key, required this.route});

  @override
  State<RoutePage> createState() => _RoutePageState();
}

class _RoutePageState extends State<RoutePage> {
  BusStop? currentStop;
  BusStop? nextStop;
  int currentIndex = 0;
  String currentLocation = "You are not currently tracking!!";
  bool isTracking = false;
  bool locationEnable = false;
  bool notiShown = false;
  CurrentStage currentStage = CurrentStage.wayToBusStop;
  String stageImage = "assets/images/navigation.gif";

  showNoti() {
    notiShown = true;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(duration: Duration(seconds: 1), content: Text(currentLocation)),
    );
  }

  Future<void> _requestPermissions() async {
    // Android 13+, you need to allow notification permission to display foreground service notification.
    //
    // iOS: If you need notification, ask for permission.
    final NotificationPermission notificationPermission =
        await FlutterForegroundTask.checkNotificationPermission();
    if (notificationPermission != NotificationPermission.granted) {
      await FlutterForegroundTask.requestNotificationPermission();
    }

    if (Platform.isAndroid) {
      // Android 12+, there are restrictions on starting a foreground service.
      //
      // To restart the service on device reboot or unexpected problem, you need to allow below permission.
      if (!await FlutterForegroundTask.isIgnoringBatteryOptimizations) {
        // This function requires `android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS` permission.
        await FlutterForegroundTask.requestIgnoreBatteryOptimization();
      }
    }
  }

  Future<void> _initService() async {
    FlutterForegroundTask.init(
      androidNotificationOptions: AndroidNotificationOptions(
        channelId: 'foreground_service',
        channelName: 'Foreground Service Notification',
        channelDescription:
            'This notification appears when the foreground service is running.',
        onlyAlertOnce: true,
      ),
      iosNotificationOptions: const IOSNotificationOptions(
        showNotification: false,
        playSound: false,
      ),
      foregroundTaskOptions: ForegroundTaskOptions(
        eventAction: ForegroundTaskEventAction.repeat(5000),
      ),
    );
  }

  Future<ServiceRequestResult> _startService() async {
    if (await FlutterForegroundTask.isRunningService) {
      return FlutterForegroundTask.restartService();
    } else {
      return FlutterForegroundTask.startService(
        serviceId: 256,
        notificationTitle: 'YBS',
        notificationText: 'Your location is tracking',
        notificationIcon: NotificationIcon(
          metaDataName: "@mipmap/launcher_icon",
        ),
        callback: startCallback,
      );
    }
  }

  Future<ServiceRequestResult> _stopService() {
    return FlutterForegroundTask.stopService();
  }

  void _onReceiveTaskData(Object data) {
    final obj = jsonDecode(jsonEncode(data));
    if (isTracking) {
      print("Change Location");
      checkLocation(double.parse(obj["lat"]), double.parse(obj["lon"]));
    }
  }

  liveTrack(BuildContext context) async {
    await _startService();
    setState(() {
      isTracking = true;
    });
  }

  void checkLocation(double lat, double lon) {
    final distance = Geolocator.distanceBetween(
      lat,
      lon,
      widget.route[currentIndex].busStop.latitude,
      widget.route[currentIndex].busStop.longitude,
    );
    if (distance < 30 && distance > 10) {
      currentLocation = widget.route[currentIndex].busStop.name;
      stageImage = "assets/images/bus_stop.gif";
      if (currentIndex < widget.route.length - 1 &&
          widget.route[currentIndex].busStop.id ==
              widget.route[currentIndex + 1].busStop.id) {
        currentIndex = currentIndex + 1;
        currentLocation = 
            "$currentLocation\nTransit bus stop!! Take off and transfer to ${widget.route[currentIndex].bus.name}";
        stageImage = "assets/images/bus_stop.gif";
      } else if (currentIndex < widget.route.length - 1 &&
          widget.route[currentIndex].bus.id !=
              widget.route[currentIndex + 1].bus.id) {
        currentLocation =
            "Take off at this bus stop!!\nWalk to ${widget.route[currentIndex + 1].busStop.name} and take ${widget.route[currentIndex + 1].bus.name}";
      }
      if (context.mounted) {
        setState(() {});
      }
      if (notiShown == false) {
        AppData.flutterTts.speak(currentLocation);
        showNoti();
      }
    } else if (distance < 10) {
      if (currentIndex < widget.route.length - 1) {
        currentIndex = currentIndex + 1;
      } else {
        currentLocation = "You are arrived to your destination";
        stageImage = "assets/images/bus_stop.png";
        if (notiShown == false) {
          AppData.flutterTts.speak(currentLocation);
          _stopService();
          AppData.positionStreamSubscription?.cancel();
          showNoti();
        }
      }
      if (context.mounted) {
        setState(() {});
      }
    } else {
      notiShown = false;
      if (currentIndex == 0) {
        stageImage = "assets/images/walking.gif";
      } else {
        stageImage = "assets/images/way_to.gif";
      }
      currentLocation = "Way to ${widget.route[currentIndex].busStop.name}";
      if (context.mounted) {
        setState(() {});
      }
    }
  }

  @override
  void initState() {
    super.initState();
    FlutterForegroundTask.addTaskDataCallback(_onReceiveTaskData);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _requestPermissions();
      _initService();
    });
  }

  @override
  void dispose() {
    FlutterForegroundTask.removeTaskDataCallback(_onReceiveTaskData);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: !isTracking,
      onPopInvokedWithResult: (didPop, result) async {
        if (didPop) {
          return;
        }
        final navigator = Navigator.of(context);
        bool value = await showModalBottomSheet(
          context: context,
          builder: (context) => Container(
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Column(
              children: [
                SizedBox(height: 20),
                ClipRRect(
                  borderRadius: BorderRadius.circular(100),
                  child: Image.asset(
                    "assets/images/tracking.gif",
                    height: 60,
                    width: 60,
                    fit: BoxFit.cover,
                  ),
                ),
                SizedBox(height: 20),
                SizedBox(
                  width: 320,
                  child: Text(
                    "Your location is currently tracing. Do you want to minimize the app and keep tracking or close the app and stop tracking?",
                    textAlign: TextAlign.center,
                    style: TextStyle(height: 1.5),
                  ),
                ),
                SizedBox(height: 30),
                SizedBox(
                  width: 320,
                  height: 50,
                  child: MaterialButton(
                    color: Colors.blue,
                    onPressed: () async {
                      try {
                        await MinimizeFlutterApp.minimizeApp();
                      } catch (e) {
                        print('Error minimizing app: $e');
                      }
                      if (context.mounted) {
                        Navigator.pop(context, false);
                      }
                    },
                    child: Text(
                      "Keep Tracking",
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
                SizedBox(height: 10),
                SizedBox(
                  width: 320,
                  height: 50,
                  child: MaterialButton(
                    color: Colors.red,
                    onPressed: () async {
                      Navigator.pop(context, true);
                      isTracking = false;
                      _stopService();
                      AppData.positionStreamSubscription?.cancel();
                    },
                    child: Text(
                      "Stop Tracking",
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
        if (value) {
          navigator.pop(result);
        }
      },
      child: Scaffold(
        body: Column(
          children: [
            Expanded(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  ClipRRect(
                    borderRadius: BorderRadius.circular(120),
                    child: Image.asset(stageImage, height: 120),
                  ),
                  SizedBox(
                    width: 320,
                    height: 60,
                    child: Center(
                      child: BlinkText(
                        currentLocation,
                        duration: Duration(seconds: 1),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            Container(
              width: double.infinity,
              padding: EdgeInsets.all(10),
              margin: EdgeInsets.symmetric(horizontal: 10),
              decoration: BoxDecoration(
                color: const Color.fromARGB(255, 245, 245, 245),
                borderRadius: BorderRadius.circular(5),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                spacing: 10,
                children: [
                  Text(widget.route.first.busStop.name),
                  Icon(
                    Icons.directions_bus,
                    color: Theme.of(context).colorScheme.primary,
                  ),
                  Text(widget.route.last.busStop.name),
                ],
              ),
            ),

            Expanded(
              flex: 2,
              child: ListView.builder(
                itemCount: widget.route.length,
                itemBuilder: (context, index) => SizedBox(
                  height: 50,
                  child: TimelineTile(
                    axis: TimelineAxis.vertical,
                    alignment: TimelineAlign.center,
                    startChild:
                        index == 0 ||
                            widget.route[index].bus.id !=
                                widget.route[index - 1].bus.id
                        ? Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [BusCard(bus: widget.route[index].bus)],
                          )
                        : null,
                    endChild: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 5),
                      child: Text(
                        widget.route[index].busStop.name,
                        style: TextStyle(
                          fontSize: 11,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    indicatorStyle: IndicatorStyle(
                      width: 15,
                      height: 15,
                      color: HexColor(widget.route[index].bus.colorCode),
                    ),
                    beforeLineStyle: LineStyle(
                      color: HexColor(widget.route[index].bus.colorCode),
                    ),
                    isFirst: index == 0,
                  ),
                ),
              ),
            ),
          ],
        ),
        floatingActionButton: isTracking
            ? FloatingActionButton.extended(
                onPressed: () {
                  setState(() {
                    isTracking = false;
                    currentLocation = "You are not currently tracking!!";
                    stageImage = "assets/images/navigation.gif";
                    _stopService();
                    AppData.positionStreamSubscription?.cancel();
                  });
                },
                icon: Icon(Icons.stop),
                label: Text("Stop tracking"),
              )
            : FloatingActionButton.extended(
                onPressed: () {
                  liveTrack(context);
                },
                icon: Icon(Icons.my_location),
                label: Text("Start Tracking"),
              ),
      ),
    );
  }
}

------- route_page backup code end -------


----- route_finder backup code --------------

import 'package:flutter/material.dart';
import 'package:flutter_location_search/flutter_location_search.dart';
import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';
import 'package:free_map/free_map.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:ybs/controllers/hex_color.dart';
import 'package:ybs/controllers/search_route_controller.dart';
import 'package:ybs/data/app_data.dart';
import 'package:ybs/models/bus.dart';
import 'package:ybs/models/bus_stop.dart';
import 'package:ybs/models/route_data.dart';
import 'package:ybs/views/route_page.dart';

class RouteFinder extends StatefulWidget {
  final LatLng currentPosition;
  const RouteFinder({super.key, required this.currentPosition});

  @override
  State<RouteFinder> createState() => _RouteFinderState();
}

class _RouteFinderState extends State<RouteFinder> {
  MapController mapController = MapController();
  List<Marker> markers = [];
  BusStop? selectedStartBusStop;
  BusStop? selectedEndBusStop;

  String start = "";
  String end = "";

  LatLng? pointLocation;

  setBusStopMarker(BuildContext context) {
    markers.clear();
    for (var i in AppData.testStop) {
      markers.add(
        Marker(
          point: LatLng(i.latitude, i.longitude),
          child: GestureDetector(
            onTap: () {
              showModalBottomSheet(
                constraints: BoxConstraints(maxHeight: 300),
                context: context,
                builder: (context) => Column(
                  children: [
                    SizedBox(height: 20),
                    Container(
                      width: double.infinity,
                      margin: EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 10,
                      ),

                      child: Row(
                        spacing: 10,
                        children: [
                          Image.asset(
                            "assets/images/bus_stop_1.png",
                            width: 24,
                          ),
                          Text(
                            i.name,
                            style: TextStyle(
                              color: Colors.blue,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Text(
                        "အနီးရှိ နေရာများ",
                        style: TextStyle(
                          color: Colors.grey,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    Expanded(
                      child: SingleChildScrollView(
                        padding: EdgeInsets.all(10),
                        child: Text(
                          i.nearPlaces,
                          style: TextStyle(fontSize: 12),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                    SizedBox(height: 20),
                    Row(
                      spacing: 5,
                      children: [
                        Expanded(
                          child: GestureDetector(
                            onTap: () {
                              selectedStartBusStop = i;
                              start = i.name;
                              Navigator.pop(context);
                            },
                            child: Container(
                              padding: EdgeInsets.all(10),
                              alignment: Alignment.center,
                              decoration: BoxDecoration(
                                color: const Color.fromARGB(255, 235, 235, 235),
                                borderRadius: BorderRadius.horizontal(
                                  left: Radius.circular(40),
                                ),
                              ),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.location_on, color: Colors.red),
                                  Text("စမှတ်တိုင်"),
                                ],
                              ),
                            ),
                          ),
                        ),
                        Expanded(
                          child: Container(
                            padding: EdgeInsets.all(10),
                            alignment: Alignment.center,
                            decoration: BoxDecoration(
                              color: const Color.fromARGB(255, 235, 235, 235),
                              borderRadius: BorderRadius.horizontal(
                                right: Radius.circular(40),
                              ),
                            ),
                            child: GestureDetector(
                              onTap: () {
                                selectedEndBusStop = i;
                                end = i.name;
                                Navigator.pop(context);
                              },
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(Icons.location_on, color: Colors.blue),
                                  Text("ဆုံးမှတ်တိုင်"),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 10),
                  ],
                ),
              ).then((value) {
                setState(() {});
              });
            },
            child: Image.asset("assets/images/bus_stop_1.png", width: 14),
          ),
        ),
      );
    }
    setState(() {});
  }

  clearAllData() {
    markers.clear();
    selectedStartBusStop = null;
    selectedEndBusStop = null;
    start = "";
    end = "";
    pointLocation = null;
    setState(() {});
  }

  @override
  void initState() {
    super.initState();
    setBusStopMarker(context);
  }

  @override
  void dispose() {
    mapController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        alignment: Alignment.bottomCenter,
        children: [
          OSMViewer(controller: SimpleMapController(initPosition: GeoPoint(latitude: widget.currentPosition.latitude, longitude: widget.currentPosition.longitude), markerHome: markers[0]))
          // FmMap(
          //   attributionAlignment: Alignment.bottomRight,
          //   mapController: mapController,
          //   mapOptions: MapOptions(
          //     initialCenter: widget.currentPosition,
          //     minZoom: 1,
          //     maxZoom: 20,
          //     initialZoom: 10,
          //     keepAlive: true,
          //   ),
          //   markers: markers,
          // ),
          Positioned(
            top: 40,
            left: 5,
            right: 5,
            child: GestureDetector(
              onTap: () {
                showModalBottomSheet(
                  isScrollControlled: true,
                  backgroundColor: Colors.transparent,
                  context: context,
                  builder: (context) => BusStopSearch(
                    onSelect: (selectedStop) {
                      selectedStartBusStop = selectedStop;
                      setState(() {
                        start = selectedStop.name;
                      });
                      Navigator.pop(context);
                    },
                  ),
                );
              },
              child: Container(
                width: MediaQuery.of(context).size.width,
                padding: EdgeInsets.symmetric(horizontal: 10, vertical: 15),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Row(
                  spacing: 5,
                  children: [
                    Icon(Icons.location_on, color: Colors.red),
                    Text(
                      start == "" ? "စမှတ်တိုင်" : start,
                      style: TextStyle(color: Colors.grey),
                    ),
                  ],
                ),
              ),
            ),
          ),
          Positioned(
            top: 100,
            left: 5,
            right: 5,
            child: GestureDetector(
              onTap: () {
                showModalBottomSheet(
                  isScrollControlled: true,
                  backgroundColor: Colors.transparent,
                  context: context,
                  builder: (context) => BusStopSearch(
                    onSelect: (selectedStop) {
                      selectedEndBusStop = selectedStop;
                      setState(() {
                        end = selectedStop.name;
                      });
                      Navigator.pop(context);
                    },
                  ),
                );
              },
              child: Container(
                width: MediaQuery.of(context).size.width,
                padding: EdgeInsets.symmetric(horizontal: 10, vertical: 15),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Row(
                  spacing: 5,
                  children: [
                    Icon(Icons.location_on, color: Colors.blue),
                    Text(
                      end == "" ? "ဆုံးမှတ်တိုင်" : end,
                      style: TextStyle(fontSize: 14, color: Colors.grey),
                    ),
                  ],
                ),
              ),
            ),
          ),
          Positioned(
            top: 160,
            right: 5,
            child: MaterialButton(
              shape: OutlineInputBorder(
                borderSide: BorderSide.none,
                borderRadius: BorderRadius.circular(8),
              ),
              color: Colors.blue,
              onPressed: () {
                if (selectedStartBusStop != null &&
                    selectedEndBusStop != null) {
                  List<List<RouteData>> routeDataList = SearchRouteController()
                      .searchRoute(selectedStartBusStop!, selectedEndBusStop!);
                  setState(() {});
                  showModalBottomSheet(
                    context: context,
                    builder: (context) => AvaliableRouteWidget(
                      selectedStartBusStop: selectedStartBusStop,
                      selectedEndBusStop: selectedEndBusStop,
                      routeList: routeDataList,
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      duration: Duration(seconds: 1),
                      content: Text("စမှတ်၊ ဆုံးမှတ် ရွေးချယ်ပါ။"),
                    ),
                  );
                }
              },
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Text(
                  "လမ်းကြောင်းရှာပါ",
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ),

          Positioned(
            bottom: 10,
            right: 10,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton.filled(
                  style: ButtonStyle(
                    backgroundColor: WidgetStatePropertyAll(Colors.white),
                  ),
                  onPressed: () async {
                    LocationData? locationData = await LocationSearch.show(
                      context: context,
                      userAgent: UserAgent(
                        appName: 'Location Search Example',
                        email: 'support@myapp.com',
                      ),
                      mode: Mode.fullscreen,
                    );
                    if (locationData != null) {
                      pointLocation = LatLng(
                        locationData.latitude,
                        locationData.longitude,
                      );
                      mapController.move(pointLocation!, 13);
                    }
                  },
                  icon: Icon(Icons.pin_drop_rounded, color: Colors.red),
                ),
                IconButton.filled(
                  style: ButtonStyle(
                    backgroundColor: WidgetStatePropertyAll(Colors.white),
                  ),
                  onPressed: () {
                    mapController.move(
                      LatLng(
                        widget.currentPosition.latitude,
                        widget.currentPosition.longitude,
                      ),
                      13,
                    );
                  },
                  icon: Icon(Icons.gps_fixed, color: Colors.blue),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class BusStopSearch extends StatefulWidget {
  final Function(BusStop selectedStop) onSelect;
  const BusStopSearch({super.key, required this.onSelect});

  @override
  State<BusStopSearch> createState() => _BusStopSearchState();
}

class _BusStopSearchState extends State<BusStopSearch> {
  List<BusStop> busStopList = AppData.testStop;
  TextEditingController controller = TextEditingController();
  FocusNode focusNode = FocusNode();

  filterStop(String filterText) {
    setState(() {
      busStopList = AppData.testStop
          .where(
            (e) =>
                e.name.contains(filterText) ||
                e.nearPlaces.contains(filterText) ||
                e.township.contains(filterText),
          )
          .toList();
    });
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.5,
      maxChildSize: 0.8,
      minChildSize: 0.2,
      shouldCloseOnMinExtent: true,
      builder: (context, scrollController) => Container(
        width: double.infinity,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          children: [
            SizedBox(height: 20),
            Text(
              "မှတ်တိုင်ရွေးချယ်ပါ",
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: TextFormField(
                controller: controller,
                focusNode: focusNode,
                decoration: InputDecoration(
                  filled: true,
                  fillColor: const Color.fromARGB(255, 243, 243, 243),
                  labelText: "မှတ်တိုင်အမည်၊ နေရာဖြင့် ရှာပါ",
                  labelStyle: TextStyle(fontSize: 12, color: Colors.grey),
                  prefixIcon: Icon(Icons.search, color: Colors.grey),
                  suffixIcon: controller.text != ""
                      ? IconButton(
                          onPressed: () {
                            controller.text = "";
                            filterStop("");
                            focusNode.unfocus();
                          },
                          icon: Icon(Icons.cancel, color: Colors.grey),
                        )
                      : null,
                  contentPadding: EdgeInsets.symmetric(
                    horizontal: 5,
                    vertical: 5,
                  ),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: BorderSide.none,
                  ),
                ),
                onChanged: (value) {
                  filterStop(value);
                },
                onTapOutside: (event) {
                  focusNode.unfocus();
                },
              ),
            ),
            Container(
              padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
              margin: EdgeInsets.only(bottom: 5),
              width: double.infinity,
              child: Text(
                "မှတ်တိုင်များ",
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey,
                ),
              ),
            ),
            Expanded(
              child: busStopList.isEmpty
                  ? Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [Text("မှတ်တိုင် မတွေ့ရှိပါ။")],
                    )
                  : ListView.builder(
                      controller: scrollController,
                      itemCount: busStopList.length,
                      itemBuilder: (context, index) => GestureDetector(
                        onTap: () {
                          widget.onSelect.call(busStopList[index]);
                        },
                        child: Container(
                          margin: EdgeInsets.only(left: 5, right: 5, bottom: 5),
                          padding: EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: const Color.fromARGB(255, 216, 238, 255),
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: Column(
                                  children: [
                                    SizedBox(
                                      width: double.infinity,
                                      child: Text(
                                        busStopList[index].name,
                                        style: TextStyle(fontSize: 16),
                                      ),
                                    ),
                                    SizedBox(
                                      width: double.infinity,
                                      child: Text(
                                        busStopList[index].nearPlaces,
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.grey,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              Icon(Icons.location_on),
                            ],
                          ),
                        ),
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}

class AvaliableRouteWidget extends StatelessWidget {
  final BusStop? selectedStartBusStop;
  final BusStop? selectedEndBusStop;
  final List<List<RouteData>> routeList;

  const AvaliableRouteWidget({
    super.key,
    required this.selectedStartBusStop,
    required this.selectedEndBusStop,
    required this.routeList,
  });

  @override
  Widget build(BuildContext context) {
    List<Set<Bus>> buses = [];
    for (var i in routeList) {
      Set<Bus> busSet = {};
      for (var j in i) {
        busSet.add(j.bus);
      }
      buses.add(busSet);
    }
    return Container(
      width: double.infinity,
      padding: EdgeInsets.only(top: 20, left: 10, right: 10),
      child: Column(
        children: [
          Text(
            "လမ်းကြောင်းများ",
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 10),
          Row(
            children: [
              Expanded(
                child: Container(
                  padding: EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: Colors.black,
                    borderRadius: BorderRadius.circular(40),
                  ),
                  child: Text(
                    selectedStartBusStop!.name,
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10),
                child: Icon(Icons.arrow_forward),
              ),
              Expanded(
                child: Container(
                  padding: EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: Colors.black,
                    borderRadius: BorderRadius.circular(40),
                  ),
                  child: Text(
                    selectedEndBusStop!.name,
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
          SizedBox(height: 10),
          Expanded(
            child: ListView.builder(
              itemCount: routeList.length,
              itemBuilder: (context, index) =>
                  routeButton(context, routeList[index], buses[index]),
            ),
          ),
        ],
      ),
    );
  }

  Widget routeButton(
    BuildContext context,
    List<RouteData> routeList,
    Set<Bus> buses,
  ) {
    return GestureDetector(
      onTap: () {
        Navigator.pop(context);
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => RoutePage(route: routeList)),
        );
      },
      child: Container(
        margin: EdgeInsets.only(bottom: 3),
        padding: EdgeInsets.symmetric(horizontal: 5, vertical: 10),
        decoration: BoxDecoration(
          color: const Color.fromARGB(255, 241, 241, 241),
          borderRadius: BorderRadius.circular(5),
        ),
        child: Row(
          children: [
            Expanded(
              child: SizedBox(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    SizedBox(
                      height: 20,
                      child: buses.length == 1
                          ? Container(
                              padding: EdgeInsets.all(2),
                              decoration: BoxDecoration(
                                color: HexColor(buses.elementAt(0).colorCode),
                                borderRadius: BorderRadius.circular(5),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                crossAxisAlignment: CrossAxisAlignment.center,
                                children: [
                                  Icon(
                                    Icons.directions_bus,
                                    size: 16,
                                    color: Colors.white,
                                  ),
                                  Text(
                                    buses.elementAt(0).name,
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 12,
                                    ),
                                  ),
                                ],
                              ),
                            )
                          : ListView.separated(
                              scrollDirection: Axis.horizontal,
                              itemBuilder: (context, index) => Container(
                                padding: EdgeInsets.all(2),
                                decoration: BoxDecoration(
                                  color: HexColor(
                                    buses.elementAt(index).colorCode,
                                  ),
                                  borderRadius: BorderRadius.circular(5),
                                ),
                                child: Row(
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    Icon(
                                      Icons.directions_bus,
                                      size: 16,
                                      color: Colors.white,
                                    ),
                                    Text(
                                      buses.elementAt(index).name,
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 12,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              separatorBuilder: (context, index) => Padding(
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 5,
                                ),
                                child: Icon(
                                  Icons.directions_walk,
                                  size: 16,
                                  color: Colors.grey,
                                ),
                              ),
                              itemCount: buses.length,
                            ),
                    ),
                    SizedBox(
                      width: double.infinity,
                      child: Text(
                        "Distance: 12 km",
                        style: TextStyle(fontSize: 12, color: Colors.grey),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(
              width: 100,
              child: Column(
                children: [
                  SizedBox(
                    width: double.infinity,
                    child: Text(
                      "20 min",
                      textAlign: TextAlign.right,
                      style: TextStyle(fontSize: 12),
                    ),
                  ),
                  SizedBox(
                    width: double.infinity,
                    child: Text(
                      "200 MMK",
                      textAlign: TextAlign.right,
                      style: TextStyle(fontSize: 11, color: Colors.grey),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

--- route_finder backup code end -------------